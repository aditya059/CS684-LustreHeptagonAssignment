node cell(req, grantin: bool) returns (ack, grantout: bool)
let 
    ack = req and grantin;
    grantout = (not req) and grantin;
tel

--node arbiter(req:bool^5) returns (ack:bool^5)
--var out: bool;
--let
--    (ack, out) = mapfold<<5>>cell(req, true);
--tel

--node display(req1, req2, req3, req4, req5: bool) 
--returns (ack1, ack2, ack3, ack4, ack5: bool)
--var req, ack: bool^5;
--let
--    req = [req1, req2, req3, req4, req5]; 
--    ack = arbiter(req);
--    ack1 = ack[0]; ack2 = ack[1]; ack3 = ack[2]; ack4 = ack[3]; ack5 = ack[4];
--tel

node arbiter<<n:int>>(req:bool^n) returns (ack:bool^n)
var out: bool;
let
    (ack, out) = mapfold<<n>>cell(req, true);
tel

node display(req1, req2, req3, req4, req5, req6: bool) 
returns (ack1, ack2, ack3, ack4, ack5, ack6: bool)
var req, ack: bool^6;
let
    req = [req1, req2, req3, req4, req5, req6]; 
    ack = arbiter<<6>>(req);
    ack1 = ack[0]; ack2 = ack[1]; ack3 = ack[2]; ack4 = ack[3]; ack5 = ack[4]; ack6 = ack[5];
tel
